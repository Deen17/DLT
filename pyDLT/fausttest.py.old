import faust
from  confluent_kafka.avro.serializer import message_serializer
#from confluent_kafka.avro.serializer import (ValueSerializerError, KeySerializerError, SerializerError)
app = faust.App('myapp1', broker='kafka://131.247.3.206.39092')

key_schema = """
{
   "namespace": "transaction.test",
   "name": "key",
   "type": "record",
   "fields" : [
     {
       "name" : "transactionID",
       "type" : "int"
     }
   ]
}
"""

value_schema = """
{
   "namespace": "transaction.test",
   "name": "value",
   "type": "record",
   "fields" : [
     {
       "name" : "transactionID",
       "type" : "int"
     },
     {
       "name" : "senderAcctNum",
       "type" : "int"
     },
     {
       "name" : "receiverAcctNum",
       "type" : "int"
     },
     {
       "name" : "senderRoutingNum",
       "type" : "int"
     },
     {
       "name" : "receiverRoutingNum",
       "type" : "int"
     },
     {
       "name" : "currency",
       "type" : "string"
     },
     {
       "name" : "amt",
       "type" : "int"
     },
     {
       "name" : "mutations",
       "type" : "array",
       "items" : "string"
     }
   ]
}
"""

x = message_serializer.MessageSerializer(registry_client = 'http://131.247.3.206:8081', reader_key_schema = key_schema, reader_value_schema = value_schema)

topic = app.topic()
# Models describe how messages are serialized:
# {"account_id": "3fae-...", amount": 3}
class Order(faust.Record):
    account_id: str
    amount: int

@app.agent(value_type=Order)
async def order(orders):
    async for order in orders:
        # process infinite stream of orders.
        print(f'Order for {order.account_id}: {order.amount}')


